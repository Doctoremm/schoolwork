global proc string Grps (string $ctrl)
{//making groups(xforms, naming)

    string $grpName;
    string $nam = $ctrl;
    string $grp;
    string $parent[];
    
    $parent = `listRelatives -parent $ctrl`;
    //find parent of object if any
       
    $grpName = $nam + "_Grp";
    //copy name to grp name + _grp to end
    
    $grp = `group -empty -name $grpName`;
    //create empty group

    matchTransform $grp $ctrl;
    //group transform to object xforms

    parent $ctrl $grp;
    //parent object under group
    
    if (size($parent) > 0)
    {
        parent $grp $parent[0];
    }
    
    return $grpName;
}



global proc string CtrlShape (string $shape)
{//different control shapes

    string $chosen;

    if ($shape == "Circle")
    {
        $chosen = `curve -bezier -d 3 -p -0.992644 0 0.0162406 -p -0.992644 0 0.0162406 -p -1.03017 0 -0.978218 -p -0.00582132 0 -0.976203 -p 1.018528 0 -0.974188 -p 0.991766 0 0.0143858 -p 0.991766 0 0.0143858 -p 0.991766 0 0.0143858 -p 1.021642 0 0.986232 -p 0.00970051 0 1.00466 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 `;
        bezierCurveToNurbs;
        closeCurve -ch 1 -ps 1 -rpo 1 -bb 0.5 -bki 0 -p 0.1;
    }
    else if ($shape == "Diamond")
    {
        $chosen = `curve -bezier -d 3 -p 0 0 0.756541 -p 0 0 0.756541 -p 0.116125 0 0.346162 -p 0.223784 0 0.225908 -p 0.331443 0 0.105654 -p 0.756541 0 0 -p 0.756541 0 0 -p 0.756541 0 0 -p 0.383461 0 -0.0665918 -p 0.225993 0 -0.215387 -p 0.0685253 0 -0.364182 -p 0 0 -0.756541 -p 0 0 -0.756541 -p 0 0 -0.756541 -p -0.0744279 0 -0.384049 -p -0.214 0 -0.216697 -p -0.353572 0 -0.0493445 -p -0.7505 0 0.00341592 -p -0.7505 0 0.00341592 -p -0.7505 0 0.00341592 -p -0.367909 0 0.0462614 -p -0.223506 0 0.223118 -p -0.0791035 0 0.399975 -p 0 0 0.756541 -p 0 0 0.756541 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 -k 4 -k 4 -k 4 -k 5 -k 5 -k 5 -k 6 -k 6 -k 6 -k 7 -k 7 -k 7 -k 8 -k 8 -k 8 `;
        bezierCurveToNurbs;
    }
    else if ($shape == "Flower")
    {
        $chosen = `curve -bezier -d 3 -p 0 0 -0.119885 -p 0 0 -0.119885 -p 0.627324 -0.0376643 0.181533 -p 0.434126 0 0.430367 -p 0.240928 0.0376643 0.679201 -p -0.119885 0 0 -p -0.119885 0 0 -p -0.119885 0 0 -p 0.220286 0 -0.690772 -p 0.431069 0 -0.426333 -p 0.641852 0 -0.161895 -p 0 0 0.119885 -p 0 0 0.119885 -p 0 0 0.119885 -p -0.695561 0 -0.153607 -p -0.413694 0 -0.42865 -p -0.131826 0 -0.703693 -p 0.119885 0 0 -p 0.119885 0 0 -p 0.119885 0 0 -p -0.14579 0 0.712775 -p -0.425601 0 0.429072 -p -0.705411 0 0.14537 -p 0 0 -0.119885 -p 0 0 -0.119885 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 -k 4 -k 4 -k 4 -k 5 -k 5 -k 5 -k 6 -k 6 -k 6 -k 7 -k 7 -k 7 -k 8 -k 8 -k 8 `;
        bezierCurveToNurbs;
    }
    else if ($shape == "Square")
    {
        $choksen = `curve -bezier -d 3 -p -1 0 -1 -p -1 0 -1 -p -1 0 1 -p -1 0 1 -p -1 0 1 -p 1 0 1 -p 1 0 1 -p 1 0 1 -p 1 0 -1 -p 1 0 -1 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 `;
        bezierCurveToNurbs;
        closeCurve -ch 1 -ps 1 -rpo 1 -bb 0.5 -bki 0 -p 0.1;
    }
    else if ($shape == "Star")
    {
        $chosen = `curve -bezier -d 3 -p 0.00487043 0 -0.985579 -p 0.00487043 0 -0.985579 -p -0.993266 0 1.017513 -p -0.993266 0 1.017513 -p -0.993266 0 1.017513 -p 1.019307 0 0.00337355 -p 1.019307 0 0.00337355 -p 1.019307 0 0.00337355 -p -0.997062 0 0.00707674 -p -0.997062 0 0.00707674 -p -0.997062 0 0.00707674 -p 1.012879 0 1.024467 -p 1.012879 0 1.024467 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 -k 2 -k 2 -k 2 -k 3 -k 3 -k 3 -k 4 -k 4 -k 4 `;
        bezierCurveToNurbs;
        closeCurve -ch 1 -ps 1 -rpo 1 -bb 0.5 -bki 0 -p 0.1;
    }
    return $chosen;
    //hardcode different shapes    
}



global proc CtrlConstrain (string $ctrl, string $child, int $parent[])
{//constrain selection to control

    
    if ($parent[0] == 1)
    {
        parentConstraint -skipRotate x -skipRotate y -skipRotate z -mo -weight 1 $ctrl $child;
        //parentConstraint translate only (skipRotate)
    }
    else if ($parent[1] == 1)
    {
        parentConstraint -skipTranslate x -skipTranslate y -skipTranslate z -mo -weight 1 $ctrl $child;
        //parentContsraint rotate only (skipTranslate)
    }
    else if ($parent[2] == 1)
    {
        parentConstraint -mo -weight 1 $ctrl $child;
        //parentConstraint rotate and translate (maintainOffset, Weight = 1)
    }
    else if ($parent[3] == 1)
    {
        
    }
}




global proc CtrlColor (string $ctrl, int $color)
{//control coloring

    string $shapes[];        
    $shapes = `listRelatives -shapes -path $ctrl`;
    //find shape node of ctrl
    
    for ($shape in $shapes)
    {
        //enable overrides on ctrl
        if(`nodeType $shape` == "nurbsCurve")
        {
            setAttr($shape + ".overrideEnabled") 1;
            setAttr($shape + ".overrideColor") ($color-1);
            //set color on ctrl to clr
        }
        
        else 
        {
            warning ("selected is not a curve");
            //warning that it has to be a nurbsCurve to change color
        }
    }
}



global proc CreateCtrls (int $color, string $shape, int $parent[])
{//create controls

    string $sels[] = `ls -selection`;
    
    for ($sel in $sels)
    {
        string $nam = $sel;

        string $ctrl = `CtrlShape($shape)`;
        //define shape of control

        string $ctrlName;
        $ctrlName = `rename $ctrl ($nam + "_Ctrl")`;
        //rename according to selection 

        CtrlColor ($ctrlName, $color);
        //define color of control

        string $grpTrans;               
        $grpTrans = `Grps ($ctrlName)`;
        //groups control under empty grp
        
        matchTransform $grpTrans $sel;
        //match control grp xforms to selection xforms(at origin if no selection)
        
        CtrlConstrain ($ctrlName, $sel, $parent);
        //constrain joint to control
    }   
}